jobs:
- job: Build_Ghidra_Plugin
  variables:
    GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
  strategy:
    matrix:
      # ghidra-git:
      #   ghidraVersion: "master"
      ghidra1022:
        ghidraUrl: "https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.2.2_build/ghidra_10.2.2_PUBLIC_20221115.zip"
        ghidraVersion: "10.2.2"
  pool:
    vmImage: 'Ubuntu-22.04'
  steps:

  - script: |
      echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_17_X64)"
      echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_17_X64)/bin:$(PATH)"
    displayName: "Set java version"
  - task: Cache@2
    condition: and(succeeded(), ne(variables['ghidraUrl'], ''))
    inputs:
      key: '"$(ghidraUrl)" | binary'
      path: $(Pipeline.Workspace)/zip
    displayName: Cache ghidra binary

  - task: Cache@2
    inputs:
      key: 'gradle | "$(Agent.OS)" | "$(System.Job.DisplayName)"'
      restoreKeys: gradle
      path: $(GRADLE_USER_HOME)
    displayName: Gradle build cache

  - bash: |
      set -e
      test -d zip || (mkdir zip && cd zip && wget $URL)
      unzip zip/*.zip
    condition: and(succeeded(), ne(variables['ghidraUrl'], ''))
    workingDirectory: $(Pipeline.Workspace)
    displayName: Download Ghidra binary from $(ghidraUrl)
    env:
      URL: $(ghidraUrl)
  - bash: |
      set -e
      sudo apt-get -y install bison flex xvfb
      git clone --depth 1 https://github.com/NationalSecurityAgency/ghidra
    condition: and(succeeded(), eq(variables['ghidraUrl'], ''))
    workingDirectory: $(Pipeline.Workspace)
    env:
      WS: $(Pipeline.Workspace)
    displayName: Download and build Ghidra from git part 1

  - task: Cache@2
    inputs:
      key: 'gradle deps'
      path: $(Pipeline.Workspace)/ghidra/build/downloads
    condition: and(succeeded(), eq(variables['ghidraUrl'], ''))

  - bash: |
      set -e
      cd ghidra
      gradle --build-cache --init-script gradle/support/fetchDependencies.gradle init
      gradle --build-cache buildGhidra
      mkdir -p $WS/zip
      cp build/dist/*.zip $WS/zip/
      cd $WS
      unzip zip/*.zip
    condition: and(succeeded(), eq(variables['ghidraUrl'], ''))
    workingDirectory: $(Pipeline.Workspace)
    env:
      WS: $(Pipeline.Workspace)
    displayName: Download and build Ghidra from git part 2
  - bash: |
      set -e
      GHIDRA_INSTALL_DIR=$(find $WS -maxdepth 1 -type d -name 'ghidra_*') gradle --build-cache
    displayName: Build Ghidra plugin
    env:
      WS: $(Pipeline.Workspace)
  - script: gradle --stop
  - publish: dist/
  - task: GitHubRelease@0
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    inputs:
      gitHubConnection: github.com_edmcman
      repositoryName: $(Build.Repository.Name)
      action: delete
      tagSource: manual
      tag: ghidra-$(ghidraVersion)
    continueOnError: true
  - task: DownloadSecureFile@1
    condition: eq(variables['Build.SourceBranchName'], 'master')
    name: deployKey
    inputs:
      secureFile: 'deploy.key'
  - bash: |
      mkdir -p ~/.ssh
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      ssh-agent -a $SSH_AUTH_SOCK > /dev/null
      chmod og-r $(deployKey.secureFilePath)
      ssh-add $(deployKey.secureFilePath)
      git config --global user.email "eschwartz@cert.org"
      git config --global user.name "sei-eschwartz"
      git remote add ssh-origin git@github.com:edmcman/ghidra-scala-loader.git
      git push --delete ssh-origin ghidra-$(ghidraVersion)
      rm -f $(deployKey.secureFilePath)
    condition: eq(variables['Build.SourceBranchName'], 'master')
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
    continueOnError: true
    displayName: Delete old git tag ghidra-$(ghidraVersion)
  - task: GitHubRelease@0
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    inputs:
      gitHubConnection: github.com_edmcman
      repositoryName: $(Build.Repository.Name)
      action: create
      target: $(Build.SourceVersion)
      tagSource: manual
      tag: ghidra-$(ghidraVersion)
      title: Ghidra Plugin for Ghidra $(ghidraVersion)
      assets: dist/*.zip
      addChangeLog: false
